#!/bin/bash

IFS=$'\n'       # Prevent "for" loop splitting filenames on whitespace
declare -A SUB  # Initialise associative array to store subtotals

stripc() {
    awk -vRS='*/' '{gsub(/\/\*.*/,"")}1' $1 | sed -r '/^(\s|[{}])*$/d'
}

striphtml() {
    awk -vRS='-->' '{gsub(/<!--.*/,"")}1' $1 | sed '/^\s*$/d'
}

count() {
    case $2 in
    awk|make|perl|python|sed|shell|tcl)
        let SUB[$2]+=$(sed -r '/^\s*(#|$)/d' $1 | wc -l);;
    ruby)
        let SUB[$2]+=$(sed -r '/^\s*(#|$)/d;/^=begin$/,/^=end$/d' $1 | wc -l);;
    c|css|js)   let SUB[$2]+=$(stripc $1 | wc -l);;
    sql|lua)    let SUB[$2]+=$(sed -r '/^\s*(\-\-|$)/d' $1 | wc -l);;
    html|xml)   let SUB[$2]+=$(striphtml $1 | wc -l);;
    esac
}

for F in $(find $@ -type f -not -path "*/.*"); do
    case $F in
        *.awk)              count $F awk;;
        *.c|*.h)            count $F c;;
        *.css)              count $F css;;
        *.html)             count $F html;;
        *.lua)              count $F lua;;
        *.js)               count $F js;;
        *.perl|*.pl|*.pm)   count $F perl;;
        *.py)               count $F python;;
        *.rb)               count $F ruby;;
        *.sed)              count $F sed;;
        *.sql)              count $F sql;;
        *.tcl)              count $F tcl;;
        *.xml)              count $F xml;;
        *.??sh)             count $F shell;;
        *[Mm]akefile)       count $F make;;
        *) case $(head -1 $F) in
            \#!*/awk*)      count $F awk;;
            *html*)         count $F html;;
            *xml*)          count $F xml;;
            \#!*/lua*)      count $F lua;;
            \#!*/perl*)     count $F perl;;
            \#!*/python*)   count $F python;;
            \#!*/ruby*)     count $F ruby;;
            \#!*/sed*)      count $F sed;;
            \#!*/??sh*)     count $F shell;;
        esac;;
    esac
done

for LANGUAGE in ${!SUB[@]}; do
    printf "%-8s %d\n" $LANGUAGE: ${SUB[$LANGUAGE]}
    let TOTAL+=${SUB[$LANGUAGE]}
done

printf "%-8s %d\n" total: $TOTAL
